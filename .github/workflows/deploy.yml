name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  deploy-database:
    name: Deploy Database Migrations
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          npx supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Push database migrations
        run: npx supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify migrations
        run: |
          echo "Migrations deployed successfully to ${{ github.event.inputs.environment || 'production' }}"

  deploy-edge-functions:
    name: Deploy Edge Functions
    runs-on: ubuntu-latest
    needs: [deploy-database]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy Edge Functions
        run: |
          if [ -d "supabase/functions" ]; then
            npx supabase functions deploy
          else
            echo "No Edge Functions to deploy"
          fi
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  deploy-web-app:
    name: Deploy Web Application
    runs-on: ubuntu-latest
    needs: [deploy-database, deploy-edge-functions]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event.inputs.environment == 'production' && '--prod' || '' }}
          working-directory: ./

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-database, deploy-edge-functions, deploy-web-app]
    if: always()
    steps:
      - name: Deployment Success
        if: ${{ needs.deploy-web-app.result == 'success' }}
        run: |
          echo "üöÄ Deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully!"
          echo "Version: ${{ github.ref_name }}"

      - name: Deployment Failed
        if: ${{ needs.deploy-web-app.result != 'success' }}
        run: |
          echo "‚ùå Deployment to ${{ github.event.inputs.environment || 'production' }} failed!"
          exit 1

      # Optional: Send notification to Slack/Discord
      # - name: Notify Slack
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: 'Deployment to ${{ github.event.inputs.environment || "production" }} ${{ job.status }}'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #   if: always()
